{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"APIfy your infra with Crossplane Crossplane is an open source Cloud Native Compute Foundation project that transforms a Kubernetes cluster into a universal control plane. In this workshop, you will be able to learn how to create an API to deploy your infrastructure using Crossplane. Goals The goals of this workshop are: Know what is Crossplane and some of its great features. Install and use it in your local Kubernetes without any costs. Deploy \"real\" infrastructure with a couple of commands. Create your own API using custom composite resources and packages. Integrate your infrastructure in a Continuos Delivery pipeline. Index Overview Lab 1 - Setup Lab 2 - Know the basis Lab 3 - Implement GitOps Thanks I would like to thank for helping me doing this workshop: Crossplane project. Upbound . Daniel Mangum . LocalStack project.","title":"Home"},{"location":"#apify-your-infra-with-crossplane","text":"Crossplane is an open source Cloud Native Compute Foundation project that transforms a Kubernetes cluster into a universal control plane. In this workshop, you will be able to learn how to create an API to deploy your infrastructure using Crossplane.","title":"APIfy your infra with Crossplane"},{"location":"#goals","text":"The goals of this workshop are: Know what is Crossplane and some of its great features. Install and use it in your local Kubernetes without any costs. Deploy \"real\" infrastructure with a couple of commands. Create your own API using custom composite resources and packages. Integrate your infrastructure in a Continuos Delivery pipeline.","title":"Goals"},{"location":"#index","text":"Overview Lab 1 - Setup Lab 2 - Know the basis Lab 3 - Implement GitOps","title":"Index"},{"location":"#thanks","text":"I would like to thank for helping me doing this workshop: Crossplane project. Upbound . Daniel Mangum . LocalStack project.","title":"Thanks"},{"location":"implement-gitops/","text":"Lab 3 - Implement GitOps GitOps is a set of practices to manage infrastructure and application configurations using Git, an open source version control system. GitOps works by using Git as a single source of truth for declarative infrastructure and applications. The Git repository contains the entire state of the system so that the trail of changes to the system state are visible and auditable. Using GitOps tool such as Argo CD or Flux CD, we will be able to make our target system match the desired state that is coded in the Git repository. So when we will deploy new resources or update an existing ones, after updating the repository the automated process will apply the changes. In the last laboratory, we will apply this concepts to deploy our infrastructure using Crossplane and Argo CD without human intervention. Info If you want to know more about Gitops and Argo CD, please read my article From GIT to Kubernetes in 10 minutes with ArgoCD . 1. Creating IaC repository As said before, a Git will be our source of truth for our infrastructure and will contain the entire state and history of it. So that the trail of changes to the system state are visible and auditable. 1.1. Create a Github repository First thing to do is to create a Git repository that we will use to store the Crosplanes files. 1 2 3 gh repo create --public acw-crossplane-with-argocd --clone --gitignore Python cd acw-crossplane-with-argocd 1.2. Add Crossplane resources Next, we have to add the yaml files containing the Crossplain resources. However, we will not push the changes to the repository. Tip In this case, we have to add argocd.argoproj.io/sync-wave and argocd.argoproj.io/sync-options annotations that will indicate ArgoCD the order of execution so claim must execute only after XD resources are created. See Sync Phases and Waves and Skip Dry Run for new custom resources types for more information. Create a CompositeResourceDefinition file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 cat > 1_definition.yaml <<EOF apiVersion: apiextensions.crossplane.io/v1 kind: CompositeResourceDefinition metadata: name: xdostorages.storage.acw.alvsanand.github.io annotations: argocd.argoproj.io/sync-wave: \"1\" spec: group: storage.acw.alvsanand.github.io names: kind: XDObjectStorage plural: xdostorages claimNames: kind: ObjectStorage plural: ostorages versions: - name: v1alpha1 served: true referenceable: true schema: openAPIV3Schema: type: object properties: spec: type: object properties: parameters: type: object properties: storageName: type: string required: - storageName required: - parameters EOF Create a Composition file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 cat > 1_composition.yaml <<EOF apiVersion: apiextensions.crossplane.io/v1 kind: Composition metadata: name: xdostorages.aws.storage.acw.alvsanand.github.io labels: serviceType: storage provider: aws annotations: argocd.argoproj.io/sync-wave: \"1\" spec: compositeTypeRef: apiVersion: storage.acw.alvsanand.github.io/v1alpha1 kind: XDObjectStorage resources: - name: s3bucket base: apiVersion: s3.aws.crossplane.io/v1beta1 kind: Bucket spec: forProvider: acl: public-read-write locationConstraint: us-east-1 providerConfigRef: name: default patches: - fromFieldPath: \"spec.parameters.storageName\" toFieldPath: \"metadata.name\" transforms: - type: string string: fmt: \"%s-acw\" EOF Create a Claim file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cat > 2_claim.yaml <<EOF apiVersion: storage.acw.alvsanand.github.io/v1alpha1 kind: XDObjectStorage metadata: name: some-bucket namespace: default annotations: argocd.argoproj.io/sync-wave: \"2\" argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true spec: compositionSelector: matchLabels: provider: aws parameters: storageName: some-bucket EOF 2. Create an App in ArgoCD After the repository is created, we should create an Application in ArgoCD. Therefore, ArgoCD will sync the Crossplane resources will the state stored in the repository. However, having the repository with no files will not create any resources. Obtain HTTPS url of the GIT repository. 1 HTTPS_REPO_URL = $( git remote show origin | sed -nr 's/.+Fetch URL: git@(.+):(.+).git/https:\\/\\/\\1\\/\\2.git/p' ) Create a new Application in auto mode and listening to the master. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 cat <<EOF | kubectl apply -f - apiVersion: argoproj.io/v1alpha1 kind: Application metadata: name: acw-storage namespace: argocd spec: project: default source: repoURL: $HTTPS_REPO_URL targetRevision: main path: . destination: server: https://kubernetes.default.svc namespace: apify-your-infra-with-crossplane syncPolicy: automated: {} EOF Wait until the application is sync. 1 2 3 4 5 kubectl get applications -n argocd acw-storage ... NAME SYNC STATUS HEALTH STATUS acw-storage Synced Healthy Furthermore, you can check in ArgoCD UI the status of the application. 3. Commit changes to Github After ArgoCD is ready to watch for changes, we will push the files to the repo in order to force the deployment. Add files and generate a commit. 1 2 git add *.yaml git commit -m \"Added Crossplane files\" Push changes to Github. 1 git push --set-upstream origin main 4. Wait for ArgoCD to sync Now that the changes are in Git, ArgoCD will detect the chances and sync our infrastructure to match the state of the repository. Wait some minutes until the application is synced. After the sync is completed, you can check the application statuskubectl describe applications -n argocd acw-storage ... Name: acw-storage Namespace: argocd Labels: <none> Annotations: <none> API Version: argoproj.io/v1alpha1 Kind: Application Metadata: Creation Timestamp: 2022 -01-07T12:51:44Z Generation: 12 Managed Fields: API Version: argoproj.io/v1alpha1 Fields Type: FieldsV1 fieldsV1: f:metadata: f:annotations: .: f:kubectl.kubernetes.io/last-applied-configuration: f:spec: .: f:destination: .: f:namespace: f:server: f:project: f:source: .: f:path: f:repoURL: f:targetRevision: f:syncPolicy: .: f:automated: Manager: kubectl-client-side-apply Operation: Update Time: 2022 -01-07T12:51:44Z API Version: argoproj.io/v1alpha1 Fields Type: FieldsV1 fieldsV1: f:status: .: f:health: .: f:status: f:history: f:operationState: .: f:finishedAt: f:message: f:operation: .: f:initiatedBy: .: f:automated: f:retry: .: f:limit: f:sync: .: f:revision: f:phase: f:startedAt: f:syncResult: .: f:resources: f:revision: f:source: .: f:path: f:repoURL: f:targetRevision: f:reconciledAt: f:resources: f:sourceType: f:summary: f:sync: .: f:comparedTo: .: f:destination: .: f:namespace: f:server: f:source: .: f:path: f:repoURL: f:targetRevision: f:revision: f:status: Manager: argocd-application-controller Operation: Update Time: 2022 -01-07T12:51:52Z Resource Version: 27693 UID: 24016e22-b199-4ed4-9f2b-6ce96018f798 Spec: Destination: Namespace: apify-your-infra-with-crossplane Server: https://kubernetes.default.svc Project: default Source: Path: . Repo URL: https://github.com/alvsanand/acw-crossplane-with-argocd.git Target Revision: main Sync Policy: Automated: Status: Health: Status: Healthy History: Deploy Started At: 2022 -01-07T12:51:45Z Deployed At: 2022 -01-07T12:51:52Z Id: 0 Revision: 2d55ed389750624c21bce8c2d534f4b77d72f837 Source: Path: . Repo URL: https://github.com/alvsanand/acw-crossplane-with-argocd.git Target Revision: main Operation State: Finished At: 2022 -01-07T12:51:52Z Message: successfully synced ( all tasks run ) Operation: Initiated By: Automated: true Retry: Limit: 5 Sync: Revision: 2d55ed389750624c21bce8c2d534f4b77d72f837 Phase: Succeeded Started At: 2022 -01-07T12:51:45Z Sync Result: Resources: Group: apiextensions.crossplane.io Hook Phase: Succeeded Kind: Composition Message: composition.apiextensions.crossplane.io/xdostorages.aws.storage.acw.alvsanand.github.io created Name: xdostorages.aws.storage.acw.alvsanand.github.io Namespace: apify-your-infra-with-crossplane Status: Synced Sync Phase: Sync Version: v1 Group: apiextensions.crossplane.io Hook Phase: Succeeded Kind: CompositeResourceDefinition Message: compositeresourcedefinition.apiextensions.crossplane.io/xdostorages.storage.acw.alvsanand.github.io created Name: xdostorages.storage.acw.alvsanand.github.io Namespace: apify-your-infra-with-crossplane Status: Synced Sync Phase: Sync Version: v1 Group: storage.acw.alvsanand.github.io Hook Phase: Running Kind: XDObjectStorage Message: xdobjectstorage.storage.acw.alvsanand.github.io/some-bucket created Name: some-bucket Namespace: apify-your-infra-with-crossplane Status: Synced Sync Phase: Sync Version: v1alpha1 Revision: 2d55ed389750624c21bce8c2d534f4b77d72f837 Source: Path: . Repo URL: https://github.com/alvsanand/acw-crossplane-with-argocd.git Target Revision: main Reconciled At: 2022 -01-07T12:51:52Z Resources: Group: apiextensions.crossplane.io Kind: CompositeResourceDefinition Name: xdostorages.storage.acw.alvsanand.github.io Status: Synced Version: v1 Group: apiextensions.crossplane.io Kind: Composition Name: xdostorages.aws.storage.acw.alvsanand.github.io Status: Synced Version: v1 Group: storage.acw.alvsanand.github.io Kind: XDObjectStorage Name: some-bucket Status: Synced Version: v1alpha1 Source Type: Directory Summary: Sync: Compared To: Destination: Namespace: apify-your-infra-with-crossplane Server: https://kubernetes.default.svc Source: Path: . Repo URL: https://github.com/alvsanand/acw-crossplane-with-argocd.git Target Revision: main Revision: 2d55ed389750624c21bce8c2d534f4b77d72f837 Status: Synced Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal OperationStarted 4m34s argocd-application-controller Initiated automated sync to '2d55ed389750624c21bce8c2d534f4b77d72f837' Normal ResourceUpdated 4m34s argocd-application-controller Updated sync status: -> OutOfSync Normal ResourceUpdated 4m34s argocd-application-controller Updated health status: -> Healthy Normal ResourceUpdated 4m33s argocd-application-controller Updated sync status: -> OutOfSync Normal ResourceUpdated 4m33s argocd-application-controller Updated health status: -> Healthy Normal OperationCompleted 4m27s argocd-application-controller Sync operation to 2d55ed389750624c21bce8c2d534f4b77d72f837 succeeded Normal ResourceUpdated 4m27s argocd-application-controller Updated sync status: OutOfSync -> Synced Finally, you can check in ArgoCD UI the status of the application. Check that the xdostorages is created. 1 2 3 4 5 kubectl get xdostorages ... NAME READY COMPOSITION AGE some-bucket True xdostorages.aws.storage.acw.alvsanand.github.io 89s Check that the bucket object is created. 1 2 3 4 5 kubectl get bucket ... NAME READY SYNCED AGE some-bucket-acw True True 113s Check that the bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 awslocal s3api list-buckets ... { \"Buckets\" : [ { \"Name\" : \"some-bucket-acw\" , \"CreationDate\" : \"2022-01-06T08:05:16.000Z\" } ] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } } 5. Cleanup the laboratory Last step, delete all resources created. In this case, we should delete the application and ArgoCD will delete the resources created with it. Delete the application. 1 kubectl delete application -n argocd acw-storage Check that the bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 awslocal s3api list-buckets ... { \"Buckets\" : [] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } }","title":"Lab 3 - Implement GitOps"},{"location":"implement-gitops/#lab-3-implement-gitops","text":"GitOps is a set of practices to manage infrastructure and application configurations using Git, an open source version control system. GitOps works by using Git as a single source of truth for declarative infrastructure and applications. The Git repository contains the entire state of the system so that the trail of changes to the system state are visible and auditable. Using GitOps tool such as Argo CD or Flux CD, we will be able to make our target system match the desired state that is coded in the Git repository. So when we will deploy new resources or update an existing ones, after updating the repository the automated process will apply the changes. In the last laboratory, we will apply this concepts to deploy our infrastructure using Crossplane and Argo CD without human intervention. Info If you want to know more about Gitops and Argo CD, please read my article From GIT to Kubernetes in 10 minutes with ArgoCD .","title":"Lab 3 - Implement GitOps"},{"location":"implement-gitops/#1-creating-iac-repository","text":"As said before, a Git will be our source of truth for our infrastructure and will contain the entire state and history of it. So that the trail of changes to the system state are visible and auditable.","title":"1. Creating IaC repository"},{"location":"implement-gitops/#11-create-a-github-repository","text":"First thing to do is to create a Git repository that we will use to store the Crosplanes files. 1 2 3 gh repo create --public acw-crossplane-with-argocd --clone --gitignore Python cd acw-crossplane-with-argocd","title":"1.1. Create a Github repository"},{"location":"implement-gitops/#12-add-crossplane-resources","text":"Next, we have to add the yaml files containing the Crossplain resources. However, we will not push the changes to the repository. Tip In this case, we have to add argocd.argoproj.io/sync-wave and argocd.argoproj.io/sync-options annotations that will indicate ArgoCD the order of execution so claim must execute only after XD resources are created. See Sync Phases and Waves and Skip Dry Run for new custom resources types for more information. Create a CompositeResourceDefinition file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 cat > 1_definition.yaml <<EOF apiVersion: apiextensions.crossplane.io/v1 kind: CompositeResourceDefinition metadata: name: xdostorages.storage.acw.alvsanand.github.io annotations: argocd.argoproj.io/sync-wave: \"1\" spec: group: storage.acw.alvsanand.github.io names: kind: XDObjectStorage plural: xdostorages claimNames: kind: ObjectStorage plural: ostorages versions: - name: v1alpha1 served: true referenceable: true schema: openAPIV3Schema: type: object properties: spec: type: object properties: parameters: type: object properties: storageName: type: string required: - storageName required: - parameters EOF Create a Composition file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 cat > 1_composition.yaml <<EOF apiVersion: apiextensions.crossplane.io/v1 kind: Composition metadata: name: xdostorages.aws.storage.acw.alvsanand.github.io labels: serviceType: storage provider: aws annotations: argocd.argoproj.io/sync-wave: \"1\" spec: compositeTypeRef: apiVersion: storage.acw.alvsanand.github.io/v1alpha1 kind: XDObjectStorage resources: - name: s3bucket base: apiVersion: s3.aws.crossplane.io/v1beta1 kind: Bucket spec: forProvider: acl: public-read-write locationConstraint: us-east-1 providerConfigRef: name: default patches: - fromFieldPath: \"spec.parameters.storageName\" toFieldPath: \"metadata.name\" transforms: - type: string string: fmt: \"%s-acw\" EOF Create a Claim file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cat > 2_claim.yaml <<EOF apiVersion: storage.acw.alvsanand.github.io/v1alpha1 kind: XDObjectStorage metadata: name: some-bucket namespace: default annotations: argocd.argoproj.io/sync-wave: \"2\" argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true spec: compositionSelector: matchLabels: provider: aws parameters: storageName: some-bucket EOF","title":"1.2. Add Crossplane resources"},{"location":"implement-gitops/#2-create-an-app-in-argocd","text":"After the repository is created, we should create an Application in ArgoCD. Therefore, ArgoCD will sync the Crossplane resources will the state stored in the repository. However, having the repository with no files will not create any resources. Obtain HTTPS url of the GIT repository. 1 HTTPS_REPO_URL = $( git remote show origin | sed -nr 's/.+Fetch URL: git@(.+):(.+).git/https:\\/\\/\\1\\/\\2.git/p' ) Create a new Application in auto mode and listening to the master. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 cat <<EOF | kubectl apply -f - apiVersion: argoproj.io/v1alpha1 kind: Application metadata: name: acw-storage namespace: argocd spec: project: default source: repoURL: $HTTPS_REPO_URL targetRevision: main path: . destination: server: https://kubernetes.default.svc namespace: apify-your-infra-with-crossplane syncPolicy: automated: {} EOF Wait until the application is sync. 1 2 3 4 5 kubectl get applications -n argocd acw-storage ... NAME SYNC STATUS HEALTH STATUS acw-storage Synced Healthy Furthermore, you can check in ArgoCD UI the status of the application.","title":"2. Create an App in ArgoCD"},{"location":"implement-gitops/#3-commit-changes-to-github","text":"After ArgoCD is ready to watch for changes, we will push the files to the repo in order to force the deployment. Add files and generate a commit. 1 2 git add *.yaml git commit -m \"Added Crossplane files\" Push changes to Github. 1 git push --set-upstream origin main","title":"3. Commit changes to Github"},{"location":"implement-gitops/#4-wait-for-argocd-to-sync","text":"Now that the changes are in Git, ArgoCD will detect the chances and sync our infrastructure to match the state of the repository. Wait some minutes until the application is synced. After the sync is completed, you can check the application statuskubectl describe applications -n argocd acw-storage ... Name: acw-storage Namespace: argocd Labels: <none> Annotations: <none> API Version: argoproj.io/v1alpha1 Kind: Application Metadata: Creation Timestamp: 2022 -01-07T12:51:44Z Generation: 12 Managed Fields: API Version: argoproj.io/v1alpha1 Fields Type: FieldsV1 fieldsV1: f:metadata: f:annotations: .: f:kubectl.kubernetes.io/last-applied-configuration: f:spec: .: f:destination: .: f:namespace: f:server: f:project: f:source: .: f:path: f:repoURL: f:targetRevision: f:syncPolicy: .: f:automated: Manager: kubectl-client-side-apply Operation: Update Time: 2022 -01-07T12:51:44Z API Version: argoproj.io/v1alpha1 Fields Type: FieldsV1 fieldsV1: f:status: .: f:health: .: f:status: f:history: f:operationState: .: f:finishedAt: f:message: f:operation: .: f:initiatedBy: .: f:automated: f:retry: .: f:limit: f:sync: .: f:revision: f:phase: f:startedAt: f:syncResult: .: f:resources: f:revision: f:source: .: f:path: f:repoURL: f:targetRevision: f:reconciledAt: f:resources: f:sourceType: f:summary: f:sync: .: f:comparedTo: .: f:destination: .: f:namespace: f:server: f:source: .: f:path: f:repoURL: f:targetRevision: f:revision: f:status: Manager: argocd-application-controller Operation: Update Time: 2022 -01-07T12:51:52Z Resource Version: 27693 UID: 24016e22-b199-4ed4-9f2b-6ce96018f798 Spec: Destination: Namespace: apify-your-infra-with-crossplane Server: https://kubernetes.default.svc Project: default Source: Path: . Repo URL: https://github.com/alvsanand/acw-crossplane-with-argocd.git Target Revision: main Sync Policy: Automated: Status: Health: Status: Healthy History: Deploy Started At: 2022 -01-07T12:51:45Z Deployed At: 2022 -01-07T12:51:52Z Id: 0 Revision: 2d55ed389750624c21bce8c2d534f4b77d72f837 Source: Path: . Repo URL: https://github.com/alvsanand/acw-crossplane-with-argocd.git Target Revision: main Operation State: Finished At: 2022 -01-07T12:51:52Z Message: successfully synced ( all tasks run ) Operation: Initiated By: Automated: true Retry: Limit: 5 Sync: Revision: 2d55ed389750624c21bce8c2d534f4b77d72f837 Phase: Succeeded Started At: 2022 -01-07T12:51:45Z Sync Result: Resources: Group: apiextensions.crossplane.io Hook Phase: Succeeded Kind: Composition Message: composition.apiextensions.crossplane.io/xdostorages.aws.storage.acw.alvsanand.github.io created Name: xdostorages.aws.storage.acw.alvsanand.github.io Namespace: apify-your-infra-with-crossplane Status: Synced Sync Phase: Sync Version: v1 Group: apiextensions.crossplane.io Hook Phase: Succeeded Kind: CompositeResourceDefinition Message: compositeresourcedefinition.apiextensions.crossplane.io/xdostorages.storage.acw.alvsanand.github.io created Name: xdostorages.storage.acw.alvsanand.github.io Namespace: apify-your-infra-with-crossplane Status: Synced Sync Phase: Sync Version: v1 Group: storage.acw.alvsanand.github.io Hook Phase: Running Kind: XDObjectStorage Message: xdobjectstorage.storage.acw.alvsanand.github.io/some-bucket created Name: some-bucket Namespace: apify-your-infra-with-crossplane Status: Synced Sync Phase: Sync Version: v1alpha1 Revision: 2d55ed389750624c21bce8c2d534f4b77d72f837 Source: Path: . Repo URL: https://github.com/alvsanand/acw-crossplane-with-argocd.git Target Revision: main Reconciled At: 2022 -01-07T12:51:52Z Resources: Group: apiextensions.crossplane.io Kind: CompositeResourceDefinition Name: xdostorages.storage.acw.alvsanand.github.io Status: Synced Version: v1 Group: apiextensions.crossplane.io Kind: Composition Name: xdostorages.aws.storage.acw.alvsanand.github.io Status: Synced Version: v1 Group: storage.acw.alvsanand.github.io Kind: XDObjectStorage Name: some-bucket Status: Synced Version: v1alpha1 Source Type: Directory Summary: Sync: Compared To: Destination: Namespace: apify-your-infra-with-crossplane Server: https://kubernetes.default.svc Source: Path: . Repo URL: https://github.com/alvsanand/acw-crossplane-with-argocd.git Target Revision: main Revision: 2d55ed389750624c21bce8c2d534f4b77d72f837 Status: Synced Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal OperationStarted 4m34s argocd-application-controller Initiated automated sync to '2d55ed389750624c21bce8c2d534f4b77d72f837' Normal ResourceUpdated 4m34s argocd-application-controller Updated sync status: -> OutOfSync Normal ResourceUpdated 4m34s argocd-application-controller Updated health status: -> Healthy Normal ResourceUpdated 4m33s argocd-application-controller Updated sync status: -> OutOfSync Normal ResourceUpdated 4m33s argocd-application-controller Updated health status: -> Healthy Normal OperationCompleted 4m27s argocd-application-controller Sync operation to 2d55ed389750624c21bce8c2d534f4b77d72f837 succeeded Normal ResourceUpdated 4m27s argocd-application-controller Updated sync status: OutOfSync -> Synced Finally, you can check in ArgoCD UI the status of the application. Check that the xdostorages is created. 1 2 3 4 5 kubectl get xdostorages ... NAME READY COMPOSITION AGE some-bucket True xdostorages.aws.storage.acw.alvsanand.github.io 89s Check that the bucket object is created. 1 2 3 4 5 kubectl get bucket ... NAME READY SYNCED AGE some-bucket-acw True True 113s Check that the bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 awslocal s3api list-buckets ... { \"Buckets\" : [ { \"Name\" : \"some-bucket-acw\" , \"CreationDate\" : \"2022-01-06T08:05:16.000Z\" } ] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } }","title":"4. Wait for ArgoCD to sync"},{"location":"implement-gitops/#5-cleanup-the-laboratory","text":"Last step, delete all resources created. In this case, we should delete the application and ArgoCD will delete the resources created with it. Delete the application. 1 kubectl delete application -n argocd acw-storage Check that the bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 awslocal s3api list-buckets ... { \"Buckets\" : [] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } }","title":"5. Cleanup the laboratory"},{"location":"know-the-basis/","text":"Lab 2 - Know the basis In the second laboratory, we are going to see the essentials of Crossplane: Managed Resources Compositions Packages 1. Managed resources A Managed Resource (MR) is Crossplane\u2019s representation of a resource in an external system - most commonly a cloud provider. They are the building blocks of Crossplane. For example, Bucket in the AWS Provider corresponds to an actual S3 Bucket in AWS. There is a one-to-one relationship and the changes on managed resources are reflected directly on the corresponding resource in the provider. You can see all available managed resources running this command kubectl get crds | grep aws | sort and the API specification in the documentation . 1.1 Simple MR Now, we are going to create a S3 Bucket and test that is working. Create the MR for the bucket. 1 2 3 4 5 6 7 8 9 10 11 12 13 cat <<EOF | kubectl apply -f - apiVersion: s3.aws.crossplane.io/v1beta1 kind: Bucket metadata: name: my-bucket spec: forProvider: # Bucket parameters acl: public-read-write locationConstraint: us-east-1 providerConfigRef: name: default EOF Get the status of the MR in K8s: 1 2 3 4 5 kubectl get buckets.s3.aws.crossplane.io # or kubectl describe bucket -w ... NAME READY SYNCED AGE my-bucket True True 2m22s Check that the bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 awslocal s3api list-buckets ... { \"Buckets\" : [ { \"Name\" : \"my-bucket\" , \"CreationDate\" : \"2022-01-05T12:14:49.000Z\" } ] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } } 1.3 Complex MRs For making things a little more interesting, it is time to create several MRs that have dependencies between them. This time we are going to create several MRs that are related: VPC -> Subnet -> Security Group -> EC2 Instance . Tip In order to solve dependencies among resources created by Crossplane, you should search into the API of the providers for the attributes that ends with Ref or Selector . Create the VPC. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cat <<EOF | kubectl apply -f - apiVersion: ec2.aws.crossplane.io/v1beta1 kind: VPC metadata: name: acw-vpc spec: forProvider: region: us-east-1 cidrBlock: 10.0.0.0/16 enableDnsSupport: true enableDnsHostNames: true instanceTenancy: default providerConfigRef: name: default EOF Create a Subnet. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cat <<EOF | kubectl apply -f - apiVersion: ec2.aws.crossplane.io/v1beta1 kind: Subnet metadata: name: acw-vpc-subnet1 spec: forProvider: region: us-east-1 availabilityZone: us-east-1b cidrBlock: 10.0.1.0/24 vpcIdRef: name: acw-vpc mapPublicIPOnLaunch: true providerConfigRef: name: default EOF Create a Security Group. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 cat <<EOF | kubectl apply -f - apiVersion: ec2.aws.crossplane.io/v1beta1 kind: SecurityGroup metadata: name: acw-instance-sg spec: forProvider: region: us-east-1 vpcIdRef: name: acw-vpc groupName: acw-instance-sg description: ACW Security Group for an Instance egress: - fromPort: 443 toPort: 443 ipProtocol: tcp ipRanges: - cidrIp: 10.0.0.0/8 providerConfigRef: name: default EOF Create a Ec2 Instance. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cat <<EOF | kubectl apply -f - apiVersion: ec2.aws.crossplane.io/v1alpha1 kind: Instance metadata: name: acw-instance spec: forProvider: region: us-east-1 imageId: ami-0dc2d3e4c0f9ebd18 securityGroupRefs: - name: acw-instance-sg subnetIdRef: name: acw-vpc-subnet1 providerConfigRef: name: default EOF Get the status of the MRs in K8s: 1 2 3 4 5 6 7 kubectl get vpc kubectl get subnet kubectl get securitygroup kubectl get instance Check that the resources has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 awslocal ec2 describe-vpcs awslocal ec2 describe-subnets awslocal ec2 describe-security-groups awslocal ec2 describe-instances ... { \"Reservations\" : [ { \"Groups\" : [] , \"Instances\" : [ { \"AmiLaunchIndex\" : 0 , \"ImageId\" : \"ami-0dc2d3e4c0f9ebd18\" , \"InstanceId\" : \"i-f731721dac1e3f8fa\" , \"InstanceType\" : \"m1.small\" , \"KernelId\" : \"None\" , \"KeyName\" : \"None\" , \"LaunchTime\" : \"2022-01-08T16:33:01.000Z\" , \"Monitoring\" : { \"State\" : \"disabled\" } , \"Placement\" : { \"AvailabilityZone\" : \"us-east-1b\" , \"GroupName\" : \"\" , \"Tenancy\" : \"default\" } , \"PrivateDnsName\" : \"ip-10-0-1-4.ec2.internal\" , \"PrivateIpAddress\" : \"10.0.1.4\" , \"ProductCodes\" : [] , \"PublicDnsName\" : \"ec2-54-214-103-229.compute-1.amazonaws.com\" , \"PublicIpAddress\" : \"54.214.103.229\" , \"State\" : { \"Code\" : 16 , \"Name\" : \"running\" } , \"StateTransitionReason\" : \"\" , \"SubnetId\" : \"subnet-746ff808\" , \"VpcId\" : \"vpc-55faade5\" , \"Architecture\" : \"x86_64\" , \"BlockDeviceMappings\" : [ { \"DeviceName\" : \"/dev/sda1\" , \"Ebs\" : { \"AttachTime\" : \"2022-01-08T16:33:01.000Z\" , \"DeleteOnTermination\" : true, \"Status\" : \"in-use\" , \"VolumeId\" : \"vol-9f7d8500\" } } ] , \"ClientToken\" : \"ABCDE0000000000003\" , \"EbsOptimized\" : false, \"Hypervisor\" : \"xen\" , \"NetworkInterfaces\" : [ { \"Association\" : { \"IpOwnerId\" : \"000000000000\" , \"PublicIp\" : \"54.214.103.229\" } , \"Attachment\" : { \"AttachTime\" : \"2015-01-01T00:00:00Z\" , \"AttachmentId\" : \"eni-attach-23ddc790\" , \"DeleteOnTermination\" : true, \"DeviceIndex\" : 0 , \"Status\" : \"attached\" } , \"Description\" : \"Primary network interface\" , \"Groups\" : [ { \"GroupName\" : \"acw-instance-sg\" , \"GroupId\" : \"sg-ffeeea4d068c6649a\" } ] , \"MacAddress\" : \"1b:2b:3c:4d:5e:6f\" , \"NetworkInterfaceId\" : \"eni-3c4ecfd4\" , \"OwnerId\" : \"000000000000\" , \"PrivateIpAddress\" : \"10.0.1.4\" , \"PrivateIpAddresses\" : [ { \"Association\" : { \"IpOwnerId\" : \"000000000000\" , \"PublicIp\" : \"54.214.103.229\" } , \"Primary\" : true, \"PrivateIpAddress\" : \"10.0.1.4\" } ] , \"SourceDestCheck\" : true, \"Status\" : \"in-use\" , \"SubnetId\" : \"subnet-746ff808\" , \"VpcId\" : \"vpc-55faade5\" } ] , \"RootDeviceName\" : \"/dev/sda1\" , \"RootDeviceType\" : \"ebs\" , \"SecurityGroups\" : [ { \"GroupName\" : \"acw-instance-sg\" , \"GroupId\" : \"sg-ffeeea4d068c6649a\" } ] , \"SourceDestCheck\" : true, \"StateReason\" : { \"Code\" : \"\" , \"Message\" : \"\" } , \"Tags\" : [ { \"Key\" : \"crossplane-kind\" , \"Value\" : \"instance.ec2.aws.crossplane.io\" } , { \"Key\" : \"crossplane-name\" , \"Value\" : \"acw-instance\" } , { \"Key\" : \"crossplane-providerconfig\" , \"Value\" : \"default\" } ] , \"VirtualizationType\" : \"paravirtual\" } ] , \"OwnerId\" : \"000000000000\" , \"ReservationId\" : \"r-c137140b\" } ] } 1.2 Cleanup the MRs Finally, we are going to delete the resources created before. To cleanup, delete all the resources using the API of Kubernetes. 1 2 3 4 5 6 7 8 9 kubectl delete bucket my-bucket kubectl delete instance acw-instance kubectl delete securitygroup acw-instance-sg kubectl delete subnet acw-vpc-subnet1 kubectl delete vpc acw-vpc Check that the resources has been deleted in LocalStack except the instances that are in state Terminated : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 awslocal s3api list-buckets awslocal ec2 describe-vpcs awslocal ec2 describe-subnets awslocal ec2 describe-security-groups awslocal ec2 describe-instances ... { \"Reservations\" : [ { \"Groups\" : [] , \"Instances\" : [ { \"AmiLaunchIndex\" : 0 , \"ImageId\" : \"ami-0dc2d3e4c0f9ebd18\" , \"InstanceId\" : \"i-f731721dac1e3f8fa\" , \"InstanceType\" : \"m1.small\" , \"KernelId\" : \"None\" , \"KeyName\" : \"None\" , \"LaunchTime\" : \"2022-01-08T16:33:01.000Z\" , \"Monitoring\" : { \"State\" : \"disabled\" } , \"Placement\" : { \"AvailabilityZone\" : \"us-east-1b\" , \"GroupName\" : \"\" , \"Tenancy\" : \"default\" } , \"PrivateDnsName\" : \"ip-10-0-1-4.ec2.internal\" , \"PrivateIpAddress\" : \"10.0.1.4\" , \"ProductCodes\" : [] , \"PublicDnsName\" : \"None\" , \"State\" : { \"Code\" : 48 , \"Name\" : \"terminated\" } , \"StateTransitionReason\" : \"User initiated (2022-01-08 16:37:38 UTC)\" , \"SubnetId\" : \"subnet-746ff808\" , \"VpcId\" : \"vpc-55faade5\" , \"Architecture\" : \"x86_64\" , \"BlockDeviceMappings\" : [] , \"ClientToken\" : \"ABCDE0000000000003\" , \"EbsOptimized\" : false, \"Hypervisor\" : \"xen\" , \"NetworkInterfaces\" : [ { \"Attachment\" : { \"AttachTime\" : \"2015-01-01T00:00:00Z\" , \"AttachmentId\" : \"eni-attach-23ddc790\" , \"DeleteOnTermination\" : true, \"DeviceIndex\" : 0 , \"Status\" : \"attached\" } , \"Description\" : \"Primary network interface\" , \"Groups\" : [ { \"GroupName\" : \"acw-instance-sg\" , \"GroupId\" : \"sg-ffeeea4d068c6649a\" } ] , \"MacAddress\" : \"1b:2b:3c:4d:5e:6f\" , \"NetworkInterfaceId\" : \"eni-3c4ecfd4\" , \"OwnerId\" : \"000000000000\" , \"PrivateIpAddress\" : \"10.0.1.4\" , \"PrivateIpAddresses\" : [ { \"Primary\" : true, \"PrivateIpAddress\" : \"10.0.1.4\" } ] , \"SourceDestCheck\" : true, \"Status\" : \"in-use\" , \"SubnetId\" : \"subnet-746ff808\" , \"VpcId\" : \"vpc-55faade5\" } ] , \"RootDeviceName\" : \"/dev/sda1\" , \"RootDeviceType\" : \"ebs\" , \"SecurityGroups\" : [ { \"GroupName\" : \"acw-instance-sg\" , \"GroupId\" : \"sg-ffeeea4d068c6649a\" } ] , \"SourceDestCheck\" : true, \"StateReason\" : { \"Code\" : \"Client.UserInitiatedShutdown\" , \"Message\" : \"Client.UserInitiatedShutdown: User initiated shutdown\" } , \"Tags\" : [ { \"Key\" : \"crossplane-kind\" , \"Value\" : \"instance.ec2.aws.crossplane.io\" } , { \"Key\" : \"crossplane-name\" , \"Value\" : \"acw-instance\" } , { \"Key\" : \"crossplane-providerconfig\" , \"Value\" : \"default\" } ] , \"VirtualizationType\" : \"paravirtual\" } ] , \"OwnerId\" : \"000000000000\" , \"ReservationId\" : \"r-c137140b\" } ] } 2. Compositions Crossplane Composite Resources (XR) are opinionated Kubernetes Custom Resources that are composed of Managed Resources. We often call them XRs for short. Composite Resources are designed to let you build your own platform with your own opinionated concepts and APIs without needing to write a Kubernetes controller from scratch. Instead, you define the schema of your XR and teach Crossplane which Managed Resources it should compose (i.e. create) when someone creates the XR you defined. In our laboratory, we are going to provide to the users a Object storage resource abstracting them the actual implementation that is done our current cloud. 2.1 XD and Composition First step, we have to create a composition for the Object Storage. Create a CompositeResourceDefinition . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 cat <<EOF | kubectl apply -f - apiVersion: apiextensions.crossplane.io/v1 kind: CompositeResourceDefinition metadata: name: xdostorages.storage.acw.alvsanand.github.io spec: group: storage.acw.alvsanand.github.io names: kind: XDObjectStorage plural: xdostorages claimNames: kind: ObjectStorage plural: ostorages versions: - name: v1alpha1 served: true referenceable: true schema: openAPIV3Schema: type: object properties: spec: type: object properties: parameters: type: object properties: storageName: type: string required: - storageName required: - parameters EOF You can find a new CRD as part of the rest of CRDs. 1 2 3 4 kubectl get crds | grep xdostorages ... xdostorages.storage.acw.alvsanand.github.io 2022 -01-05T12:42:05Z Create a Composition for that definition. It will use a buckets.s3.aws.crossplane.io MR of the AWS provider: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 cat <<EOF | kubectl apply -f - apiVersion: apiextensions.crossplane.io/v1 kind: Composition metadata: name: xdostorages.aws.storage.acw.alvsanand.github.io labels: serviceType: storage provider: aws spec: compositeTypeRef: apiVersion: storage.acw.alvsanand.github.io/v1alpha1 kind: XDObjectStorage resources: - name: s3bucket base: apiVersion: s3.aws.crossplane.io/v1beta1 kind: Bucket spec: forProvider: acl: public-read-write locationConstraint: us-east-1 providerConfigRef: name: default patches: - fromFieldPath: \"spec.parameters.storageName\" toFieldPath: \"metadata.name\" transforms: - type: string string: fmt: \"%s-acw\" EOF Finally, you can find a new composition. 1 2 3 4 kubectl get composition | grep xdostorages ... xdostorages.aws.storage.acw.alvsanand.github.io 27s 2.2 Resource Claim Second step, user will create a claim for the Object Storage composition. Create a CompositeResourceDefinition for our Object Storage: 1 2 3 4 5 6 7 8 9 10 11 12 13 cat <<EOF | kubectl apply -f - apiVersion: storage.acw.alvsanand.github.io/v1alpha1 kind: XDObjectStorage metadata: name: some-bucket namespace: default spec: compositionSelector: matchLabels: provider: aws parameters: storageName: some-bucket EOF Check that the xdostorages is created. 1 2 3 4 5 kubectl get xdostorages ... NAME READY COMPOSITION AGE some-bucket True xdostorages.aws.storage.acw.alvsanand.github.io 89s Check that the S3 bucket object is created. 1 2 3 4 5 kubectl get bucket ... NAME READY SYNCED AGE some-bucket-acw True True 113s Check that the S3 bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 awslocal s3api list-buckets ... { \"Buckets\" : [ { \"Name\" : \"some-bucket-acw\" , \"CreationDate\" : \"2022-01-05T15:36:06.000Z\" } ] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } } 2.3 Cleanup the Composition Last step, delete all resources created. Delete all the resources. 1 2 3 4 5 kubectl delete xdostorages some-bucket kubectl delete composition xdostorages.aws.storage.acw.alvsanand.github.io kubectl delete crds xdostorages.storage.acw.alvsanand.github.io Check that the bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 awslocal s3api list-buckets ... { \"Buckets\" : [] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } } 3. Packages Crossplane packages are opinionated OCI images that contain a stream of YAML that can be parsed by the Crossplane package manager. Crossplane packages come in two varieties: Providers and Configurations. They vary in the types of resources they may contain in their packages. In the last part of the laboratory, we will cover Configurations . 3.1 Configuration Package Firstly, we have to create the package with the required resources in you local machine. Create a temporal directory for our package. 1 PACKAGE_DIR = $( mktemp -d ) && cd $PACKAGE_DIR Create a CompositeResourceDefinition file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 cat > definition.yaml <<EOF apiVersion: apiextensions.crossplane.io/v1 kind: CompositeResourceDefinition metadata: name: xdostorages.storage.acw.alvsanand.github.io spec: group: storage.acw.alvsanand.github.io names: kind: XDObjectStorage plural: xdostorages claimNames: kind: ObjectStorage plural: ostorages versions: - name: v1alpha1 served: true referenceable: true schema: openAPIV3Schema: type: object properties: spec: type: object properties: parameters: type: object properties: storageName: type: string required: - storageName required: - parameters EOF Create a Composition file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 cat > composition.yaml <<EOF apiVersion: apiextensions.crossplane.io/v1 kind: Composition metadata: name: xdostorages.aws.storage.acw.alvsanand.github.io labels: serviceType: storage provider: aws spec: compositeTypeRef: apiVersion: storage.acw.alvsanand.github.io/v1alpha1 kind: XDObjectStorage resources: - name: s3bucket base: apiVersion: s3.aws.crossplane.io/v1beta1 kind: Bucket spec: forProvider: acl: public-read-write locationConstraint: us-east-1 providerConfigRef: name: default patches: - fromFieldPath: \"spec.parameters.storageName\" toFieldPath: \"metadata.name\" transforms: - type: string string: fmt: \"%s-acw\" EOF Create a Configuration file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cat > crossplane.yaml <<EOF apiVersion: meta.pkg.crossplane.io/v1 kind: Configuration metadata: name: acw-storage annotations: serviceType: storage provider: aws spec: crossplane: version: \">=v1.0.0-0\" dependsOn: - provider: crossplane/provider-aws version: \">=v0.20.0\" EOF Build the package configuration. 1 kubectl crossplane build configuration --name acw-storage Create a package configuration image. 1 2 3 4 5 IMAGE_ID = $( docker load -i acw-storage.xpkg | sed 's|Loaded image ID: ||' ) docker tag $IMAGE_ID $LOCAL_IP :5432/acw/storage:v0.1.0 docker push $LOCAL_IP :5432/acw/storage:v0.1.0 Create the configuration in order to have XDObjectStorage available. 1 2 3 4 5 6 7 8 9 10 11 cat <<EOF | kubectl apply -f - apiVersion: pkg.crossplane.io/v1 kind: Configuration metadata: name: acw-storage-configuration spec: package: $LOCAL_IP:5432/acw/storage:v0.1.0 packagePullPolicy: IfNotPresent revisionActivationPolicy: Automatic revisionHistoryLimit: 1 EOF Check the Configuration. 1 2 3 4 5 kubectl get configuration acw-storage-configuration kubectl get crds | grep xdostorages kubectl get composition | grep xdostorages 3.2 Resource Claim again Secondly, user will create a claim for the Storage composition but this time loaded from a Configuration package. Create a CompositeResourceDefinition for our Object Storage. 1 2 3 4 5 6 7 8 9 10 11 12 13 cat <<EOF | kubectl apply -f - apiVersion: storage.acw.alvsanand.github.io/v1alpha1 kind: XDObjectStorage metadata: name: some-bucket namespace: default spec: compositionSelector: matchLabels: provider: aws parameters: storageName: some-bucket EOF Check that the xdostorages is created. 1 2 3 4 5 kubectl get xdostorages ... NAME READY COMPOSITION AGE some-bucket True xdostorages.aws.storage.acw.alvsanand.github.io 89s Check that the bucket object is created. 1 2 3 4 5 kubectl get bucket ... NAME READY SYNCED AGE some-bucket-acw True True 113s Check that the bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 awslocal s3api list-buckets ... { \"Buckets\" : [ { \"Name\" : \"some-bucket-acw\" , \"CreationDate\" : \"2022-01-06T08:05:16.000Z\" } ] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } } 3.3 Cleanup the Package Finally, delete all resources created. Delete all the resources: 1 2 3 4 5 6 7 kubectl delete xdostorages some-bucket kubectl delete composition xdostorages.aws.storage.acw.alvsanand.github.io kubectl delete crds xdostorages.storage.acw.alvsanand.github.io kubectl delete configuration acw-storage-configuration Check that the bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 awslocal s3api list-buckets ... { \"Buckets\" : [] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } }","title":"Lab 2 - Know the basis"},{"location":"know-the-basis/#lab-2-know-the-basis","text":"In the second laboratory, we are going to see the essentials of Crossplane: Managed Resources Compositions Packages","title":"Lab 2 - Know the basis"},{"location":"know-the-basis/#1-managed-resources","text":"A Managed Resource (MR) is Crossplane\u2019s representation of a resource in an external system - most commonly a cloud provider. They are the building blocks of Crossplane. For example, Bucket in the AWS Provider corresponds to an actual S3 Bucket in AWS. There is a one-to-one relationship and the changes on managed resources are reflected directly on the corresponding resource in the provider. You can see all available managed resources running this command kubectl get crds | grep aws | sort and the API specification in the documentation .","title":"1. Managed resources"},{"location":"know-the-basis/#11-simple-mr","text":"Now, we are going to create a S3 Bucket and test that is working. Create the MR for the bucket. 1 2 3 4 5 6 7 8 9 10 11 12 13 cat <<EOF | kubectl apply -f - apiVersion: s3.aws.crossplane.io/v1beta1 kind: Bucket metadata: name: my-bucket spec: forProvider: # Bucket parameters acl: public-read-write locationConstraint: us-east-1 providerConfigRef: name: default EOF Get the status of the MR in K8s: 1 2 3 4 5 kubectl get buckets.s3.aws.crossplane.io # or kubectl describe bucket -w ... NAME READY SYNCED AGE my-bucket True True 2m22s Check that the bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 awslocal s3api list-buckets ... { \"Buckets\" : [ { \"Name\" : \"my-bucket\" , \"CreationDate\" : \"2022-01-05T12:14:49.000Z\" } ] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } }","title":"1.1 Simple MR"},{"location":"know-the-basis/#13-complex-mrs","text":"For making things a little more interesting, it is time to create several MRs that have dependencies between them. This time we are going to create several MRs that are related: VPC -> Subnet -> Security Group -> EC2 Instance . Tip In order to solve dependencies among resources created by Crossplane, you should search into the API of the providers for the attributes that ends with Ref or Selector . Create the VPC. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cat <<EOF | kubectl apply -f - apiVersion: ec2.aws.crossplane.io/v1beta1 kind: VPC metadata: name: acw-vpc spec: forProvider: region: us-east-1 cidrBlock: 10.0.0.0/16 enableDnsSupport: true enableDnsHostNames: true instanceTenancy: default providerConfigRef: name: default EOF Create a Subnet. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cat <<EOF | kubectl apply -f - apiVersion: ec2.aws.crossplane.io/v1beta1 kind: Subnet metadata: name: acw-vpc-subnet1 spec: forProvider: region: us-east-1 availabilityZone: us-east-1b cidrBlock: 10.0.1.0/24 vpcIdRef: name: acw-vpc mapPublicIPOnLaunch: true providerConfigRef: name: default EOF Create a Security Group. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 cat <<EOF | kubectl apply -f - apiVersion: ec2.aws.crossplane.io/v1beta1 kind: SecurityGroup metadata: name: acw-instance-sg spec: forProvider: region: us-east-1 vpcIdRef: name: acw-vpc groupName: acw-instance-sg description: ACW Security Group for an Instance egress: - fromPort: 443 toPort: 443 ipProtocol: tcp ipRanges: - cidrIp: 10.0.0.0/8 providerConfigRef: name: default EOF Create a Ec2 Instance. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cat <<EOF | kubectl apply -f - apiVersion: ec2.aws.crossplane.io/v1alpha1 kind: Instance metadata: name: acw-instance spec: forProvider: region: us-east-1 imageId: ami-0dc2d3e4c0f9ebd18 securityGroupRefs: - name: acw-instance-sg subnetIdRef: name: acw-vpc-subnet1 providerConfigRef: name: default EOF Get the status of the MRs in K8s: 1 2 3 4 5 6 7 kubectl get vpc kubectl get subnet kubectl get securitygroup kubectl get instance Check that the resources has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 awslocal ec2 describe-vpcs awslocal ec2 describe-subnets awslocal ec2 describe-security-groups awslocal ec2 describe-instances ... { \"Reservations\" : [ { \"Groups\" : [] , \"Instances\" : [ { \"AmiLaunchIndex\" : 0 , \"ImageId\" : \"ami-0dc2d3e4c0f9ebd18\" , \"InstanceId\" : \"i-f731721dac1e3f8fa\" , \"InstanceType\" : \"m1.small\" , \"KernelId\" : \"None\" , \"KeyName\" : \"None\" , \"LaunchTime\" : \"2022-01-08T16:33:01.000Z\" , \"Monitoring\" : { \"State\" : \"disabled\" } , \"Placement\" : { \"AvailabilityZone\" : \"us-east-1b\" , \"GroupName\" : \"\" , \"Tenancy\" : \"default\" } , \"PrivateDnsName\" : \"ip-10-0-1-4.ec2.internal\" , \"PrivateIpAddress\" : \"10.0.1.4\" , \"ProductCodes\" : [] , \"PublicDnsName\" : \"ec2-54-214-103-229.compute-1.amazonaws.com\" , \"PublicIpAddress\" : \"54.214.103.229\" , \"State\" : { \"Code\" : 16 , \"Name\" : \"running\" } , \"StateTransitionReason\" : \"\" , \"SubnetId\" : \"subnet-746ff808\" , \"VpcId\" : \"vpc-55faade5\" , \"Architecture\" : \"x86_64\" , \"BlockDeviceMappings\" : [ { \"DeviceName\" : \"/dev/sda1\" , \"Ebs\" : { \"AttachTime\" : \"2022-01-08T16:33:01.000Z\" , \"DeleteOnTermination\" : true, \"Status\" : \"in-use\" , \"VolumeId\" : \"vol-9f7d8500\" } } ] , \"ClientToken\" : \"ABCDE0000000000003\" , \"EbsOptimized\" : false, \"Hypervisor\" : \"xen\" , \"NetworkInterfaces\" : [ { \"Association\" : { \"IpOwnerId\" : \"000000000000\" , \"PublicIp\" : \"54.214.103.229\" } , \"Attachment\" : { \"AttachTime\" : \"2015-01-01T00:00:00Z\" , \"AttachmentId\" : \"eni-attach-23ddc790\" , \"DeleteOnTermination\" : true, \"DeviceIndex\" : 0 , \"Status\" : \"attached\" } , \"Description\" : \"Primary network interface\" , \"Groups\" : [ { \"GroupName\" : \"acw-instance-sg\" , \"GroupId\" : \"sg-ffeeea4d068c6649a\" } ] , \"MacAddress\" : \"1b:2b:3c:4d:5e:6f\" , \"NetworkInterfaceId\" : \"eni-3c4ecfd4\" , \"OwnerId\" : \"000000000000\" , \"PrivateIpAddress\" : \"10.0.1.4\" , \"PrivateIpAddresses\" : [ { \"Association\" : { \"IpOwnerId\" : \"000000000000\" , \"PublicIp\" : \"54.214.103.229\" } , \"Primary\" : true, \"PrivateIpAddress\" : \"10.0.1.4\" } ] , \"SourceDestCheck\" : true, \"Status\" : \"in-use\" , \"SubnetId\" : \"subnet-746ff808\" , \"VpcId\" : \"vpc-55faade5\" } ] , \"RootDeviceName\" : \"/dev/sda1\" , \"RootDeviceType\" : \"ebs\" , \"SecurityGroups\" : [ { \"GroupName\" : \"acw-instance-sg\" , \"GroupId\" : \"sg-ffeeea4d068c6649a\" } ] , \"SourceDestCheck\" : true, \"StateReason\" : { \"Code\" : \"\" , \"Message\" : \"\" } , \"Tags\" : [ { \"Key\" : \"crossplane-kind\" , \"Value\" : \"instance.ec2.aws.crossplane.io\" } , { \"Key\" : \"crossplane-name\" , \"Value\" : \"acw-instance\" } , { \"Key\" : \"crossplane-providerconfig\" , \"Value\" : \"default\" } ] , \"VirtualizationType\" : \"paravirtual\" } ] , \"OwnerId\" : \"000000000000\" , \"ReservationId\" : \"r-c137140b\" } ] }","title":"1.3 Complex MRs"},{"location":"know-the-basis/#12-cleanup-the-mrs","text":"Finally, we are going to delete the resources created before. To cleanup, delete all the resources using the API of Kubernetes. 1 2 3 4 5 6 7 8 9 kubectl delete bucket my-bucket kubectl delete instance acw-instance kubectl delete securitygroup acw-instance-sg kubectl delete subnet acw-vpc-subnet1 kubectl delete vpc acw-vpc Check that the resources has been deleted in LocalStack except the instances that are in state Terminated : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 awslocal s3api list-buckets awslocal ec2 describe-vpcs awslocal ec2 describe-subnets awslocal ec2 describe-security-groups awslocal ec2 describe-instances ... { \"Reservations\" : [ { \"Groups\" : [] , \"Instances\" : [ { \"AmiLaunchIndex\" : 0 , \"ImageId\" : \"ami-0dc2d3e4c0f9ebd18\" , \"InstanceId\" : \"i-f731721dac1e3f8fa\" , \"InstanceType\" : \"m1.small\" , \"KernelId\" : \"None\" , \"KeyName\" : \"None\" , \"LaunchTime\" : \"2022-01-08T16:33:01.000Z\" , \"Monitoring\" : { \"State\" : \"disabled\" } , \"Placement\" : { \"AvailabilityZone\" : \"us-east-1b\" , \"GroupName\" : \"\" , \"Tenancy\" : \"default\" } , \"PrivateDnsName\" : \"ip-10-0-1-4.ec2.internal\" , \"PrivateIpAddress\" : \"10.0.1.4\" , \"ProductCodes\" : [] , \"PublicDnsName\" : \"None\" , \"State\" : { \"Code\" : 48 , \"Name\" : \"terminated\" } , \"StateTransitionReason\" : \"User initiated (2022-01-08 16:37:38 UTC)\" , \"SubnetId\" : \"subnet-746ff808\" , \"VpcId\" : \"vpc-55faade5\" , \"Architecture\" : \"x86_64\" , \"BlockDeviceMappings\" : [] , \"ClientToken\" : \"ABCDE0000000000003\" , \"EbsOptimized\" : false, \"Hypervisor\" : \"xen\" , \"NetworkInterfaces\" : [ { \"Attachment\" : { \"AttachTime\" : \"2015-01-01T00:00:00Z\" , \"AttachmentId\" : \"eni-attach-23ddc790\" , \"DeleteOnTermination\" : true, \"DeviceIndex\" : 0 , \"Status\" : \"attached\" } , \"Description\" : \"Primary network interface\" , \"Groups\" : [ { \"GroupName\" : \"acw-instance-sg\" , \"GroupId\" : \"sg-ffeeea4d068c6649a\" } ] , \"MacAddress\" : \"1b:2b:3c:4d:5e:6f\" , \"NetworkInterfaceId\" : \"eni-3c4ecfd4\" , \"OwnerId\" : \"000000000000\" , \"PrivateIpAddress\" : \"10.0.1.4\" , \"PrivateIpAddresses\" : [ { \"Primary\" : true, \"PrivateIpAddress\" : \"10.0.1.4\" } ] , \"SourceDestCheck\" : true, \"Status\" : \"in-use\" , \"SubnetId\" : \"subnet-746ff808\" , \"VpcId\" : \"vpc-55faade5\" } ] , \"RootDeviceName\" : \"/dev/sda1\" , \"RootDeviceType\" : \"ebs\" , \"SecurityGroups\" : [ { \"GroupName\" : \"acw-instance-sg\" , \"GroupId\" : \"sg-ffeeea4d068c6649a\" } ] , \"SourceDestCheck\" : true, \"StateReason\" : { \"Code\" : \"Client.UserInitiatedShutdown\" , \"Message\" : \"Client.UserInitiatedShutdown: User initiated shutdown\" } , \"Tags\" : [ { \"Key\" : \"crossplane-kind\" , \"Value\" : \"instance.ec2.aws.crossplane.io\" } , { \"Key\" : \"crossplane-name\" , \"Value\" : \"acw-instance\" } , { \"Key\" : \"crossplane-providerconfig\" , \"Value\" : \"default\" } ] , \"VirtualizationType\" : \"paravirtual\" } ] , \"OwnerId\" : \"000000000000\" , \"ReservationId\" : \"r-c137140b\" } ] }","title":"1.2 Cleanup the MRs"},{"location":"know-the-basis/#2-compositions","text":"Crossplane Composite Resources (XR) are opinionated Kubernetes Custom Resources that are composed of Managed Resources. We often call them XRs for short. Composite Resources are designed to let you build your own platform with your own opinionated concepts and APIs without needing to write a Kubernetes controller from scratch. Instead, you define the schema of your XR and teach Crossplane which Managed Resources it should compose (i.e. create) when someone creates the XR you defined. In our laboratory, we are going to provide to the users a Object storage resource abstracting them the actual implementation that is done our current cloud.","title":"2. Compositions"},{"location":"know-the-basis/#21-xd-and-composition","text":"First step, we have to create a composition for the Object Storage. Create a CompositeResourceDefinition . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 cat <<EOF | kubectl apply -f - apiVersion: apiextensions.crossplane.io/v1 kind: CompositeResourceDefinition metadata: name: xdostorages.storage.acw.alvsanand.github.io spec: group: storage.acw.alvsanand.github.io names: kind: XDObjectStorage plural: xdostorages claimNames: kind: ObjectStorage plural: ostorages versions: - name: v1alpha1 served: true referenceable: true schema: openAPIV3Schema: type: object properties: spec: type: object properties: parameters: type: object properties: storageName: type: string required: - storageName required: - parameters EOF You can find a new CRD as part of the rest of CRDs. 1 2 3 4 kubectl get crds | grep xdostorages ... xdostorages.storage.acw.alvsanand.github.io 2022 -01-05T12:42:05Z Create a Composition for that definition. It will use a buckets.s3.aws.crossplane.io MR of the AWS provider: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 cat <<EOF | kubectl apply -f - apiVersion: apiextensions.crossplane.io/v1 kind: Composition metadata: name: xdostorages.aws.storage.acw.alvsanand.github.io labels: serviceType: storage provider: aws spec: compositeTypeRef: apiVersion: storage.acw.alvsanand.github.io/v1alpha1 kind: XDObjectStorage resources: - name: s3bucket base: apiVersion: s3.aws.crossplane.io/v1beta1 kind: Bucket spec: forProvider: acl: public-read-write locationConstraint: us-east-1 providerConfigRef: name: default patches: - fromFieldPath: \"spec.parameters.storageName\" toFieldPath: \"metadata.name\" transforms: - type: string string: fmt: \"%s-acw\" EOF Finally, you can find a new composition. 1 2 3 4 kubectl get composition | grep xdostorages ... xdostorages.aws.storage.acw.alvsanand.github.io 27s","title":"2.1 XD and Composition"},{"location":"know-the-basis/#22-resource-claim","text":"Second step, user will create a claim for the Object Storage composition. Create a CompositeResourceDefinition for our Object Storage: 1 2 3 4 5 6 7 8 9 10 11 12 13 cat <<EOF | kubectl apply -f - apiVersion: storage.acw.alvsanand.github.io/v1alpha1 kind: XDObjectStorage metadata: name: some-bucket namespace: default spec: compositionSelector: matchLabels: provider: aws parameters: storageName: some-bucket EOF Check that the xdostorages is created. 1 2 3 4 5 kubectl get xdostorages ... NAME READY COMPOSITION AGE some-bucket True xdostorages.aws.storage.acw.alvsanand.github.io 89s Check that the S3 bucket object is created. 1 2 3 4 5 kubectl get bucket ... NAME READY SYNCED AGE some-bucket-acw True True 113s Check that the S3 bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 awslocal s3api list-buckets ... { \"Buckets\" : [ { \"Name\" : \"some-bucket-acw\" , \"CreationDate\" : \"2022-01-05T15:36:06.000Z\" } ] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } }","title":"2.2 Resource Claim"},{"location":"know-the-basis/#23-cleanup-the-composition","text":"Last step, delete all resources created. Delete all the resources. 1 2 3 4 5 kubectl delete xdostorages some-bucket kubectl delete composition xdostorages.aws.storage.acw.alvsanand.github.io kubectl delete crds xdostorages.storage.acw.alvsanand.github.io Check that the bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 awslocal s3api list-buckets ... { \"Buckets\" : [] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } }","title":"2.3 Cleanup the Composition"},{"location":"know-the-basis/#3-packages","text":"Crossplane packages are opinionated OCI images that contain a stream of YAML that can be parsed by the Crossplane package manager. Crossplane packages come in two varieties: Providers and Configurations. They vary in the types of resources they may contain in their packages. In the last part of the laboratory, we will cover Configurations .","title":"3. Packages"},{"location":"know-the-basis/#31-configuration-package","text":"Firstly, we have to create the package with the required resources in you local machine. Create a temporal directory for our package. 1 PACKAGE_DIR = $( mktemp -d ) && cd $PACKAGE_DIR Create a CompositeResourceDefinition file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 cat > definition.yaml <<EOF apiVersion: apiextensions.crossplane.io/v1 kind: CompositeResourceDefinition metadata: name: xdostorages.storage.acw.alvsanand.github.io spec: group: storage.acw.alvsanand.github.io names: kind: XDObjectStorage plural: xdostorages claimNames: kind: ObjectStorage plural: ostorages versions: - name: v1alpha1 served: true referenceable: true schema: openAPIV3Schema: type: object properties: spec: type: object properties: parameters: type: object properties: storageName: type: string required: - storageName required: - parameters EOF Create a Composition file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 cat > composition.yaml <<EOF apiVersion: apiextensions.crossplane.io/v1 kind: Composition metadata: name: xdostorages.aws.storage.acw.alvsanand.github.io labels: serviceType: storage provider: aws spec: compositeTypeRef: apiVersion: storage.acw.alvsanand.github.io/v1alpha1 kind: XDObjectStorage resources: - name: s3bucket base: apiVersion: s3.aws.crossplane.io/v1beta1 kind: Bucket spec: forProvider: acl: public-read-write locationConstraint: us-east-1 providerConfigRef: name: default patches: - fromFieldPath: \"spec.parameters.storageName\" toFieldPath: \"metadata.name\" transforms: - type: string string: fmt: \"%s-acw\" EOF Create a Configuration file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cat > crossplane.yaml <<EOF apiVersion: meta.pkg.crossplane.io/v1 kind: Configuration metadata: name: acw-storage annotations: serviceType: storage provider: aws spec: crossplane: version: \">=v1.0.0-0\" dependsOn: - provider: crossplane/provider-aws version: \">=v0.20.0\" EOF Build the package configuration. 1 kubectl crossplane build configuration --name acw-storage Create a package configuration image. 1 2 3 4 5 IMAGE_ID = $( docker load -i acw-storage.xpkg | sed 's|Loaded image ID: ||' ) docker tag $IMAGE_ID $LOCAL_IP :5432/acw/storage:v0.1.0 docker push $LOCAL_IP :5432/acw/storage:v0.1.0 Create the configuration in order to have XDObjectStorage available. 1 2 3 4 5 6 7 8 9 10 11 cat <<EOF | kubectl apply -f - apiVersion: pkg.crossplane.io/v1 kind: Configuration metadata: name: acw-storage-configuration spec: package: $LOCAL_IP:5432/acw/storage:v0.1.0 packagePullPolicy: IfNotPresent revisionActivationPolicy: Automatic revisionHistoryLimit: 1 EOF Check the Configuration. 1 2 3 4 5 kubectl get configuration acw-storage-configuration kubectl get crds | grep xdostorages kubectl get composition | grep xdostorages","title":"3.1 Configuration Package"},{"location":"know-the-basis/#32-resource-claim-again","text":"Secondly, user will create a claim for the Storage composition but this time loaded from a Configuration package. Create a CompositeResourceDefinition for our Object Storage. 1 2 3 4 5 6 7 8 9 10 11 12 13 cat <<EOF | kubectl apply -f - apiVersion: storage.acw.alvsanand.github.io/v1alpha1 kind: XDObjectStorage metadata: name: some-bucket namespace: default spec: compositionSelector: matchLabels: provider: aws parameters: storageName: some-bucket EOF Check that the xdostorages is created. 1 2 3 4 5 kubectl get xdostorages ... NAME READY COMPOSITION AGE some-bucket True xdostorages.aws.storage.acw.alvsanand.github.io 89s Check that the bucket object is created. 1 2 3 4 5 kubectl get bucket ... NAME READY SYNCED AGE some-bucket-acw True True 113s Check that the bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 awslocal s3api list-buckets ... { \"Buckets\" : [ { \"Name\" : \"some-bucket-acw\" , \"CreationDate\" : \"2022-01-06T08:05:16.000Z\" } ] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } }","title":"3.2 Resource Claim again"},{"location":"know-the-basis/#33-cleanup-the-package","text":"Finally, delete all resources created. Delete all the resources: 1 2 3 4 5 6 7 kubectl delete xdostorages some-bucket kubectl delete composition xdostorages.aws.storage.acw.alvsanand.github.io kubectl delete crds xdostorages.storage.acw.alvsanand.github.io kubectl delete configuration acw-storage-configuration Check that the bucket has been created in LocalStack. 1 2 3 4 5 6 7 8 9 10 awslocal s3api list-buckets ... { \"Buckets\" : [] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } }","title":"3.3 Cleanup the Package"},{"location":"overview/","text":"Overview 1. What is Crossplane? Crossplane is an open source Cloud Native Compute Foundation project that transforms a Kubernetes cluster into a universal control plane. With the help of Crossplane, you will be able to assemble infrastructure from multiple vendors, and expose higher level self-service APIs for application teams to consume, without having to write any code. Crossplane introduces multiple building blocks that enable you to provision, compose, and consume infrastructure using the Kubernetes API. These individual concepts work together to allow for powerful separation of concern between different personas in an organization, meaning that each member of a team interacts with Crossplane at an appropriate level of abstraction. 2. Concepts You must know at least the following concepts: Packages Providers Managed Resources Composite Resources Composite Resources Claim 2.1. Packages Packages allow Crossplane to be extended to include new functionality. This typically looks like bundling a set of Kubernetes CRDs and controllers that represent and manage external infrastructure (i.e. a provider), then installing them into a cluster where Crossplane is running. Crossplane handles making sure any new CRDs do not conflict with existing ones, as well as manages the RBAC and security of new packages. Packages are not strictly required to be providers, but it is the most common use-case for packages at this time. 2.2. Providers Providers are packages that enable Crossplane to provision infrastructure on an external service. They bring CRDs (i.e. managed resources) that map one-to-one to external infrastructure resources, as well as controllers to manage the life-cycle of those resources. There most prominent providers are: provider-alibaba provider-aws provider-azure provider-gcp provider-rook provider-helm Furthermore, there are many others supported mainly by the community known as crossplane-contrib 2.3. Managed Resources Managed resources are Kubernetes custom resources that represent infrastructure primitives. Managed resources with an API version of v1beta1 or higher support every field that the cloud provider does for the given resource. 2.4. Composite Resources A composite resource (XR) is a special kind of custom resource that is defined by a CompositeResourceDefinition. It composes one or more managed resources into a higher level infrastructure unit. Composite resources are infrastructure operator facing, but may optionally offer an application developer facing composite resource claim that acts as a proxy for a composite resource. 2.5. Composite Resource Claim A \"Composite Resource Claim\", \"XRC\", or just \"a claim\" is also an API type defined using Crossplane. Each type of claim corresponds to a type of composite resource, and the pair have nearly identical schemas. Like composite resources, the type of a claim is arbitrary. 2.6. Where the State Goes? Just like Terraform Crossplane tracks the state of your resources as custom Kubernetes resources and can reconcile them if necessary. So, the state of your infra is stored in the ETCD of your cluster. Which might be a bit worrisome. Especially, if you treat your clusters like cattle, spin up new and bring down old clusters regularly. It would be also a concern if one day you want to make a ship-and-lift migration to the new cluster. 3. Why should we use Crossplane? Crossplane will enable us a lot of possibilities: Provide an option to DevOps to define abstract infrastructure types and templates that map to them. That will reduce the cost of maintenance but at the same time increase the security and compliance of our systems. Create a infrastructure marketplace, so teams will have fast access to the infra without any help and manual intervention. Use the same language (Kubernetes API style) for everything, we can describes everything needed to run an application, from deployment to infrastructure requirements (databases, queues, \u2026). Integrate with the same GitOps tools such as Argo CD , Github Actions or Jenkins . As Crossplane is a Kubernetes operator, it has reconciliation built into its heart and therefore all the time actively makes sure that the infrastructure adheres to the defined state. 4. Commercial Support Upbound is the company behind Crossplane. Upbound\u2019s product offerings are available via a subscription model that currently has two tiers. The first is a free tier catering to individuals getting started with control planes and who need tooling to debug and share their Crossplane providers and configurations. It includes full access to Universal Crossplane (UXP), the ability to publish public listings in Upbound Registry, and limited access to Upbound Cloud. Upbound\u2019s enterprise tier unlocks additional value across the product portfolio. Platform teams can manage unlimited control planes in Upbound Cloud, create unlimited private listings in Upbound Registry, and get access to 24/7 support, prioritized bug fixes, implementation services, onboarding and training.","title":"Overview"},{"location":"overview/#overview","text":"","title":"Overview"},{"location":"overview/#1-what-is-crossplane","text":"Crossplane is an open source Cloud Native Compute Foundation project that transforms a Kubernetes cluster into a universal control plane. With the help of Crossplane, you will be able to assemble infrastructure from multiple vendors, and expose higher level self-service APIs for application teams to consume, without having to write any code. Crossplane introduces multiple building blocks that enable you to provision, compose, and consume infrastructure using the Kubernetes API. These individual concepts work together to allow for powerful separation of concern between different personas in an organization, meaning that each member of a team interacts with Crossplane at an appropriate level of abstraction.","title":"1. What is Crossplane?"},{"location":"overview/#2-concepts","text":"You must know at least the following concepts: Packages Providers Managed Resources Composite Resources Composite Resources Claim","title":"2. Concepts"},{"location":"overview/#21-packages","text":"Packages allow Crossplane to be extended to include new functionality. This typically looks like bundling a set of Kubernetes CRDs and controllers that represent and manage external infrastructure (i.e. a provider), then installing them into a cluster where Crossplane is running. Crossplane handles making sure any new CRDs do not conflict with existing ones, as well as manages the RBAC and security of new packages. Packages are not strictly required to be providers, but it is the most common use-case for packages at this time.","title":"2.1. Packages"},{"location":"overview/#22-providers","text":"Providers are packages that enable Crossplane to provision infrastructure on an external service. They bring CRDs (i.e. managed resources) that map one-to-one to external infrastructure resources, as well as controllers to manage the life-cycle of those resources. There most prominent providers are: provider-alibaba provider-aws provider-azure provider-gcp provider-rook provider-helm Furthermore, there are many others supported mainly by the community known as crossplane-contrib","title":"2.2. Providers"},{"location":"overview/#23-managed-resources","text":"Managed resources are Kubernetes custom resources that represent infrastructure primitives. Managed resources with an API version of v1beta1 or higher support every field that the cloud provider does for the given resource.","title":"2.3. Managed Resources"},{"location":"overview/#24-composite-resources","text":"A composite resource (XR) is a special kind of custom resource that is defined by a CompositeResourceDefinition. It composes one or more managed resources into a higher level infrastructure unit. Composite resources are infrastructure operator facing, but may optionally offer an application developer facing composite resource claim that acts as a proxy for a composite resource.","title":"2.4. Composite Resources"},{"location":"overview/#25-composite-resource-claim","text":"A \"Composite Resource Claim\", \"XRC\", or just \"a claim\" is also an API type defined using Crossplane. Each type of claim corresponds to a type of composite resource, and the pair have nearly identical schemas. Like composite resources, the type of a claim is arbitrary.","title":"2.5. Composite Resource Claim"},{"location":"overview/#26-where-the-state-goes","text":"Just like Terraform Crossplane tracks the state of your resources as custom Kubernetes resources and can reconcile them if necessary. So, the state of your infra is stored in the ETCD of your cluster. Which might be a bit worrisome. Especially, if you treat your clusters like cattle, spin up new and bring down old clusters regularly. It would be also a concern if one day you want to make a ship-and-lift migration to the new cluster.","title":"2.6. Where the State Goes?"},{"location":"overview/#3-why-should-we-use-crossplane","text":"Crossplane will enable us a lot of possibilities: Provide an option to DevOps to define abstract infrastructure types and templates that map to them. That will reduce the cost of maintenance but at the same time increase the security and compliance of our systems. Create a infrastructure marketplace, so teams will have fast access to the infra without any help and manual intervention. Use the same language (Kubernetes API style) for everything, we can describes everything needed to run an application, from deployment to infrastructure requirements (databases, queues, \u2026). Integrate with the same GitOps tools such as Argo CD , Github Actions or Jenkins . As Crossplane is a Kubernetes operator, it has reconciliation built into its heart and therefore all the time actively makes sure that the infrastructure adheres to the defined state.","title":"3. Why should we use Crossplane?"},{"location":"overview/#4-commercial-support","text":"Upbound is the company behind Crossplane. Upbound\u2019s product offerings are available via a subscription model that currently has two tiers. The first is a free tier catering to individuals getting started with control planes and who need tooling to debug and share their Crossplane providers and configurations. It includes full access to Universal Crossplane (UXP), the ability to publish public listings in Upbound Registry, and limited access to Upbound Cloud. Upbound\u2019s enterprise tier unlocks additional value across the product portfolio. Platform teams can manage unlimited control planes in Upbound Cloud, create unlimited private listings in Upbound Registry, and get access to 24/7 support, prioritized bug fixes, implementation services, onboarding and training.","title":"4. Commercial Support"},{"location":"setup/","text":"Lab 1 - Setup In the first lab, you will setup your computer for the following laboratories. Here are some services that we will install: Local Kubernetes cluster Crossplane LocalStack 0. Requisites Before begining with this laboratory, it is neccessary to have the installed and configured the following elements: Linux, WSL or Linux VM. Docker . Helm Github Client 1. Kubernetes Although there are many easy of ways for deploying a Kubernetes cluster ( Docker Desktop , Minikube , Kind , Rancher Desktop , ...), we have selected k3d because it is ver fast and easy to install. Info k3d is a lightweight wrapper to run k3s (Rancher Lab\u2019s minimal Kubernetes distribution) in docker. k3d makes it very easy to create single- and multi-node k3s clusters in docker, e.g. for local development on Kubernetes. Install k3d cli. 1 curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash Create a k3d cluster with 1 master and 2 workers with a registry. 1 k3d cluster create --agents 2 --servers 1 --registry-create k3d-local-registry:0.0.0.0:5432 Obtain the local IP address of your computer. 1 LOCAL_IP = $( ip -o route get to 8 .8.8.8 | sed -n 's/.*src \\([0-9.]\\+\\).*/\\1/p' ) Add \"LOCAL_IP:5432\" to \"insecure-registries\" in Docker. Warning This is necessary, so we can use the Image registry created by k3d. When you have finished the workshop, you should delete the Kubernetes cluster. 1 k3d cluster delete 2. Crossplane Install Crossplane. 1 2 3 4 5 6 kubectl create namespace crossplane-system helm repo add crossplane-stable https://charts.crossplane.io/stable helm repo update helm install crossplane --namespace crossplane-system crossplane-stable/crossplane Wait until Crossplane is ready. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 kubectl get all -n crossplane-system ... NAME READY STATUS RESTARTS AGE pod/crossplane-rbac-manager-5bf768f5dc-m5fvr 1 /1 Running 0 34s pod/crossplane-7545d9567-wntct 1 /1 Running 0 34s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/crossplane-rbac-manager 1 /1 1 1 34s deployment.apps/crossplane 1 /1 1 1 34s NAME DESIRED CURRENT READY AGE replicaset.apps/crossplane-rbac-manager-5bf768f5dc 1 1 1 34s replicaset.apps/crossplane-7545d9567 1 1 1 34s Install Crossplane cli. 1 curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh Install AWS provider. 1 kubectl crossplane install provider crossplane/provider-aws:v0.21.0 Wait until AWS provider is ready. 1 2 3 4 5 kubectl get providers.pkg.crossplane.io ... NAME INSTALLED HEALTHY PACKAGE AGE crossplane-provider-aws True True crossplane/provider-aws:v0.21.0 4m38s Create AWS credentials for crossplane. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 cat <<EOF | kubectl apply -f - --- apiVersion: v1 kind: Secret metadata: name: localstack-creds namespace: crossplane-system type: Opaque data: credentials: W2RlZmF1bHRdCmF3c19hY2Nlc3Nfa2V5X2lkID0gdGVzdAphd3Nfc2VjcmV0X2FjY2Vzc19rZXkgPSB0ZXN0Cg== --- apiVersion: aws.crossplane.io/v1beta1 kind: ProviderConfig metadata: name: default spec: endpoint: hostnameImmutable: true url: type: Static static: http://localstack.awslocal.svc.cluster.local:4566 credentials: source: Secret secretRef: namespace: crossplane-system name: localstack-creds key: credentials EOF List all Crossplane CRDS available. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 kubectl get crds | grep aws | sort ... activities.sfn.aws.crossplane.io 2022 -01-05T12:14:06Z addons.eks.aws.crossplane.io 2022 -01-05T12:14:07Z addresses.ec2.aws.crossplane.io 2022 -01-05T12:14:10Z aliases.kms.aws.crossplane.io 2022 -01-05T12:14:06Z apimappings.apigatewayv2.aws.crossplane.io 2022 -01-05T12:14:05Z apis.apigatewayv2.aws.crossplane.io 2022 -01-05T12:14:08Z authorizers.apigatewayv2.aws.crossplane.io 2022 -01-05T12:14:08Z backups.dynamodb.aws.crossplane.io 2022 -01-05T12:14:09Z brokers.mq.aws.crossplane.io 2022 -01-05T12:14:09Z bucketpolicies.s3.aws.crossplane.io 2022 -01-05T12:14:06Z buckets.s3.aws.crossplane.io 2022 -01-05T12:14:06Z cacheclusters.cache.aws.crossplane.io 2022 -01-05T12:14:09Z cachepolicies.cloudfront.aws.crossplane.io 2022 -01-05T12:14:09Z cachesubnetgroups.cache.aws.crossplane.io 2022 -01-05T12:14:08Z certificateauthorities.acmpca.aws.crossplane.io 2022 -01-05T12:14:10Z certificateauthoritypermissions.acmpca.aws.crossplane.io 2022 -01-05T12:14:05Z certificates.acm.aws.crossplane.io 2022 -01-05T12:14:07Z classifiers.glue.aws.crossplane.io 2022 -01-05T12:14:05Z ... 3. LocalStack In order to simulate AWS cloud, we will use LocalStack . LocalStack computer is a cloud service emulator that runs in a single container on your laptop or in your CI environment. With LocalStack, you can run your AWS applications or Lambdas entirely on your local machine without connecting to a remote cloud provider! Install LocalStack helm. 1 2 3 4 5 6 kubectl create namespace awslocal helm repo add localstack-repo https://helm.localstack.cloud helm repo update helm upgrade --install localstack localstack-repo/localstack -n awslocal Wait until LocalStack is ready. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 kubectl get all -n awslocal ... NAME READY STATUS RESTARTS AGE pod/localstack-6fb5dd88d7-chkcn 1 /1 Running 0 4m2s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE service/localstack NodePort 10 .43.185.234 <none> 4566 :31566/TCP,4571:31571/TCP 4m2s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/localstack 1 /1 1 1 4m2s NAME DESIRED CURRENT READY AGE replicaset.apps/localstack-6fb5dd88d7 1 1 1 4m2s Configure LocalStack to your be accessible by your local machine. 1 2 3 kubectl port-forward -n awslocal service/localstack 34566 :4566 > /dev/null 2 > & 1 & alias awslocal = \"AWS_ACCESS_KEY_ID='test' AWS_SECRET_ACCESS_KEY='test' AWS_DEFAULT_REGION='us-east-1' aws --endpoint-url=http://localhost:34566\" Test awscli. 1 2 3 4 5 6 7 8 9 10 awslocal s3api list-buckets ... { \"Buckets\" : [] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } } 4. ArgoCD Install ArgoCD. 1 2 3 kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml Wait until ArgoCD is ready. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 kubectl get all -n argocd ... NAME READY STATUS RESTARTS AGE pod/argocd-redis-5b6967fdfc-cjbdt 1 /1 Running 0 5m4s pod/argocd-repo-server-656c76778f-6vz2t 1 /1 Running 0 5m4s pod/argocd-application-controller-0 1 /1 Running 0 5m3s pod/argocd-dex-server-66f865ffb4-twwnk 1 /1 Running 0 5m4s pod/argocd-server-cd68f46f8-bn2fm 1 /1 Running 0 5m4s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE service/argocd-dex-server ClusterIP 10 .43.85.30 <none> 5556 /TCP,5557/TCP,5558/TCP 5m5s service/argocd-metrics ClusterIP 10 .43.250.61 <none> 8082 /TCP 5m5s service/argocd-redis ClusterIP 10 .43.175.128 <none> 6379 /TCP 5m5s service/argocd-repo-server ClusterIP 10 .43.183.205 <none> 8081 /TCP,8084/TCP 5m5s service/argocd-server ClusterIP 10 .43.35.2 <none> 80 /TCP,443/TCP 5m5s service/argocd-server-metrics ClusterIP 10 .43.197.134 <none> 8083 /TCP 5m4s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/argocd-redis 1 /1 1 1 5m4s deployment.apps/argocd-repo-server 1 /1 1 1 5m4s deployment.apps/argocd-dex-server 1 /1 1 1 5m4s deployment.apps/argocd-server 1 /1 1 1 5m4s NAME DESIRED CURRENT READY AGE replicaset.apps/argocd-redis-5b6967fdfc 1 1 1 5m4s replicaset.apps/argocd-repo-server-656c76778f 1 1 1 5m4s replicaset.apps/argocd-dex-server-66f865ffb4 1 1 1 5m4s replicaset.apps/argocd-server-cd68f46f8 1 1 1 5m4s NAME READY AGE statefulset.apps/argocd-application-controller 1 /1 5m4s Install also ArgoCD CLI in you computer. 1 2 3 sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 sudo chmod +x /usr/local/bin/argocd Change ArgoCD credentials. 1 2 3 4 kubectl -n argocd patch secret argocd-secret \\ -p '{\"stringData\": {\"admin.password\": \"$2a$10$mivhwttXM0U5eBrZGtAG8.VSRL1l9cZNAmaSaqotIzXRBRwID1NT.\", \"admin.passwordMtime\": \"' $( date +%FT%T ) '\" }}' Expose ArgoCD UI. 1 kubectl port-forward svc/argocd-server -n argocd 10443 :443 > /dev/null 2 > & 1 & Login with ArgoCD CLI. 1 argocd login localhost:10443 --username admin --password admin --insecure Finally, in order to test it, open ArgoCD UI in your browser.","title":"Lab 1 - Setup"},{"location":"setup/#lab-1-setup","text":"In the first lab, you will setup your computer for the following laboratories. Here are some services that we will install: Local Kubernetes cluster Crossplane LocalStack","title":"Lab 1 - Setup"},{"location":"setup/#0-requisites","text":"Before begining with this laboratory, it is neccessary to have the installed and configured the following elements: Linux, WSL or Linux VM. Docker . Helm Github Client","title":"0. Requisites"},{"location":"setup/#1-kubernetes","text":"Although there are many easy of ways for deploying a Kubernetes cluster ( Docker Desktop , Minikube , Kind , Rancher Desktop , ...), we have selected k3d because it is ver fast and easy to install. Info k3d is a lightweight wrapper to run k3s (Rancher Lab\u2019s minimal Kubernetes distribution) in docker. k3d makes it very easy to create single- and multi-node k3s clusters in docker, e.g. for local development on Kubernetes. Install k3d cli. 1 curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash Create a k3d cluster with 1 master and 2 workers with a registry. 1 k3d cluster create --agents 2 --servers 1 --registry-create k3d-local-registry:0.0.0.0:5432 Obtain the local IP address of your computer. 1 LOCAL_IP = $( ip -o route get to 8 .8.8.8 | sed -n 's/.*src \\([0-9.]\\+\\).*/\\1/p' ) Add \"LOCAL_IP:5432\" to \"insecure-registries\" in Docker. Warning This is necessary, so we can use the Image registry created by k3d. When you have finished the workshop, you should delete the Kubernetes cluster. 1 k3d cluster delete","title":"1. Kubernetes"},{"location":"setup/#2-crossplane","text":"Install Crossplane. 1 2 3 4 5 6 kubectl create namespace crossplane-system helm repo add crossplane-stable https://charts.crossplane.io/stable helm repo update helm install crossplane --namespace crossplane-system crossplane-stable/crossplane Wait until Crossplane is ready. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 kubectl get all -n crossplane-system ... NAME READY STATUS RESTARTS AGE pod/crossplane-rbac-manager-5bf768f5dc-m5fvr 1 /1 Running 0 34s pod/crossplane-7545d9567-wntct 1 /1 Running 0 34s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/crossplane-rbac-manager 1 /1 1 1 34s deployment.apps/crossplane 1 /1 1 1 34s NAME DESIRED CURRENT READY AGE replicaset.apps/crossplane-rbac-manager-5bf768f5dc 1 1 1 34s replicaset.apps/crossplane-7545d9567 1 1 1 34s Install Crossplane cli. 1 curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh Install AWS provider. 1 kubectl crossplane install provider crossplane/provider-aws:v0.21.0 Wait until AWS provider is ready. 1 2 3 4 5 kubectl get providers.pkg.crossplane.io ... NAME INSTALLED HEALTHY PACKAGE AGE crossplane-provider-aws True True crossplane/provider-aws:v0.21.0 4m38s Create AWS credentials for crossplane. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 cat <<EOF | kubectl apply -f - --- apiVersion: v1 kind: Secret metadata: name: localstack-creds namespace: crossplane-system type: Opaque data: credentials: W2RlZmF1bHRdCmF3c19hY2Nlc3Nfa2V5X2lkID0gdGVzdAphd3Nfc2VjcmV0X2FjY2Vzc19rZXkgPSB0ZXN0Cg== --- apiVersion: aws.crossplane.io/v1beta1 kind: ProviderConfig metadata: name: default spec: endpoint: hostnameImmutable: true url: type: Static static: http://localstack.awslocal.svc.cluster.local:4566 credentials: source: Secret secretRef: namespace: crossplane-system name: localstack-creds key: credentials EOF List all Crossplane CRDS available. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 kubectl get crds | grep aws | sort ... activities.sfn.aws.crossplane.io 2022 -01-05T12:14:06Z addons.eks.aws.crossplane.io 2022 -01-05T12:14:07Z addresses.ec2.aws.crossplane.io 2022 -01-05T12:14:10Z aliases.kms.aws.crossplane.io 2022 -01-05T12:14:06Z apimappings.apigatewayv2.aws.crossplane.io 2022 -01-05T12:14:05Z apis.apigatewayv2.aws.crossplane.io 2022 -01-05T12:14:08Z authorizers.apigatewayv2.aws.crossplane.io 2022 -01-05T12:14:08Z backups.dynamodb.aws.crossplane.io 2022 -01-05T12:14:09Z brokers.mq.aws.crossplane.io 2022 -01-05T12:14:09Z bucketpolicies.s3.aws.crossplane.io 2022 -01-05T12:14:06Z buckets.s3.aws.crossplane.io 2022 -01-05T12:14:06Z cacheclusters.cache.aws.crossplane.io 2022 -01-05T12:14:09Z cachepolicies.cloudfront.aws.crossplane.io 2022 -01-05T12:14:09Z cachesubnetgroups.cache.aws.crossplane.io 2022 -01-05T12:14:08Z certificateauthorities.acmpca.aws.crossplane.io 2022 -01-05T12:14:10Z certificateauthoritypermissions.acmpca.aws.crossplane.io 2022 -01-05T12:14:05Z certificates.acm.aws.crossplane.io 2022 -01-05T12:14:07Z classifiers.glue.aws.crossplane.io 2022 -01-05T12:14:05Z ...","title":"2. Crossplane"},{"location":"setup/#3-localstack","text":"In order to simulate AWS cloud, we will use LocalStack . LocalStack computer is a cloud service emulator that runs in a single container on your laptop or in your CI environment. With LocalStack, you can run your AWS applications or Lambdas entirely on your local machine without connecting to a remote cloud provider! Install LocalStack helm. 1 2 3 4 5 6 kubectl create namespace awslocal helm repo add localstack-repo https://helm.localstack.cloud helm repo update helm upgrade --install localstack localstack-repo/localstack -n awslocal Wait until LocalStack is ready. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 kubectl get all -n awslocal ... NAME READY STATUS RESTARTS AGE pod/localstack-6fb5dd88d7-chkcn 1 /1 Running 0 4m2s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE service/localstack NodePort 10 .43.185.234 <none> 4566 :31566/TCP,4571:31571/TCP 4m2s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/localstack 1 /1 1 1 4m2s NAME DESIRED CURRENT READY AGE replicaset.apps/localstack-6fb5dd88d7 1 1 1 4m2s Configure LocalStack to your be accessible by your local machine. 1 2 3 kubectl port-forward -n awslocal service/localstack 34566 :4566 > /dev/null 2 > & 1 & alias awslocal = \"AWS_ACCESS_KEY_ID='test' AWS_SECRET_ACCESS_KEY='test' AWS_DEFAULT_REGION='us-east-1' aws --endpoint-url=http://localhost:34566\" Test awscli. 1 2 3 4 5 6 7 8 9 10 awslocal s3api list-buckets ... { \"Buckets\" : [] , \"Owner\" : { \"DisplayName\" : \"webfile\" , \"ID\" : \"bcaf1ffd86f41161ca5fb16fd081034f\" } }","title":"3. LocalStack"},{"location":"setup/#4-argocd","text":"Install ArgoCD. 1 2 3 kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml Wait until ArgoCD is ready. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 kubectl get all -n argocd ... NAME READY STATUS RESTARTS AGE pod/argocd-redis-5b6967fdfc-cjbdt 1 /1 Running 0 5m4s pod/argocd-repo-server-656c76778f-6vz2t 1 /1 Running 0 5m4s pod/argocd-application-controller-0 1 /1 Running 0 5m3s pod/argocd-dex-server-66f865ffb4-twwnk 1 /1 Running 0 5m4s pod/argocd-server-cd68f46f8-bn2fm 1 /1 Running 0 5m4s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE service/argocd-dex-server ClusterIP 10 .43.85.30 <none> 5556 /TCP,5557/TCP,5558/TCP 5m5s service/argocd-metrics ClusterIP 10 .43.250.61 <none> 8082 /TCP 5m5s service/argocd-redis ClusterIP 10 .43.175.128 <none> 6379 /TCP 5m5s service/argocd-repo-server ClusterIP 10 .43.183.205 <none> 8081 /TCP,8084/TCP 5m5s service/argocd-server ClusterIP 10 .43.35.2 <none> 80 /TCP,443/TCP 5m5s service/argocd-server-metrics ClusterIP 10 .43.197.134 <none> 8083 /TCP 5m4s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/argocd-redis 1 /1 1 1 5m4s deployment.apps/argocd-repo-server 1 /1 1 1 5m4s deployment.apps/argocd-dex-server 1 /1 1 1 5m4s deployment.apps/argocd-server 1 /1 1 1 5m4s NAME DESIRED CURRENT READY AGE replicaset.apps/argocd-redis-5b6967fdfc 1 1 1 5m4s replicaset.apps/argocd-repo-server-656c76778f 1 1 1 5m4s replicaset.apps/argocd-dex-server-66f865ffb4 1 1 1 5m4s replicaset.apps/argocd-server-cd68f46f8 1 1 1 5m4s NAME READY AGE statefulset.apps/argocd-application-controller 1 /1 5m4s Install also ArgoCD CLI in you computer. 1 2 3 sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 sudo chmod +x /usr/local/bin/argocd Change ArgoCD credentials. 1 2 3 4 kubectl -n argocd patch secret argocd-secret \\ -p '{\"stringData\": {\"admin.password\": \"$2a$10$mivhwttXM0U5eBrZGtAG8.VSRL1l9cZNAmaSaqotIzXRBRwID1NT.\", \"admin.passwordMtime\": \"' $( date +%FT%T ) '\" }}' Expose ArgoCD UI. 1 kubectl port-forward svc/argocd-server -n argocd 10443 :443 > /dev/null 2 > & 1 & Login with ArgoCD CLI. 1 argocd login localhost:10443 --username admin --password admin --insecure Finally, in order to test it, open ArgoCD UI in your browser.","title":"4. ArgoCD"}]}